@startuml

Resource <|-- Device
ResourceManager "1" *-- "many" Resource : contains

' Connect the output of one resource to the input of another
' Similar to Pipe in Linux
' Pipe is based on mediator design pattern
IPipe <|-- Pipe
IPipe "1" --[Dashed]--> "1" Resource

class ResourceManager{
    -map<uint32_t, Resource::Ptr> m_resources
    +get_resource(uint32_t index) : Resource::Ptr
}

interface Resource {
    +get_dev_index() : uint32_t
    +set_pipe(IPipe::Ptr pipe) : void 
    +read(uint32_t data_size) : vector<uint8_t> data
    +write(vector<uint8_t>& data) : bool
}

class Device {
    -uint32_t m_dev_index
    -IPipe::Ptr m_pipe
    -vector<uint8_t> m_in_buffer
    -vector<uint8_t> m_out_data
    -uint32_t m_max_size
    +Device(uint32_t dev_index)
    +get_dev_index() override: uint32_t
    +set_pipe(IPipe::Ptr pipe) override : void 
    +read(uint32_t data_size) override : vector<uint8_t> data
    ' Log read data
    '   read from m_in_buffer
    +write(vector<uint8_t>& data) override : bool
    ' Log written data
    ' if(m_pipe)
    '   m_pipe->write(data)
    ' else
    '   write to m_out_buffer
}

interface IPipe {
    +write(vector<uint8_t>& data) : bool
}

class Pipe {
    -Resource::Ptr src;
    -Resource::Ptr dst;
    +Pipe(Resource::Ptr src, Resource::Ptr dst)
    ' src->set_pipe(this);
    +write(vector<uint8_t>& data) override : bool
    ' r2->write_data(data)
}
@enduml
