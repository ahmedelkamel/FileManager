@startuml

IFile <|-- File
FileManager "1" *-- "many" IFile : contains
FileManager <- Process : has
Process "1" o-left- "many" IFile : contains

class FileManager{
    -map<uint32_t, IFile::Ptr> m_files
    +get_file(uint32_t file_id) : IFile::Ptr
}

interface IFile {
    +get_file_id() : uint32_t
    +read(const uint32_t data_size) : vector<uint8_t>
    +write(const vector<uint8_t>& data) : bool
}

class File {
    -uint32_t m_file_id
    -vector<uint8_t> m_buffer
    -uint32_t m_max_size
    +File(const uint32_t file_id)
    +get_file_id() override: uint32_t
    +read(const uint32_t data_size) override : vector<uint8_t>
    '   data = /* read from m_in_buffer */
    ' Log read data
    ' return data
    +write(const vector<uint8_t>& data) override : bool
    ' Log written data
    '   rv = /* write to m_out_buffer */
    ' return rv;
}

class Process {
    -vector<IFile::Ptr> m_files
    -uint32_t m_nr_files
    -FileManager::Ptr m_file_manager
    +Process(const FileManager::Ptr file_manager)
    +open_file(uint32_t file_id) : bool
    ' auto file = m_file_manager->get_file(file_id)
    ' m_files[m_nr_files++] = file
    ' return true
}

@enduml
